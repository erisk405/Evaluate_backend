// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  prefix_id     String?
  password      String
  role_id       String?
  department_id String?
  image_id      String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  phone         String?

  prefix              Prefix?       @relation(fields: [prefix_id], references: [prefix_id])
  role                Role?         @relation(fields: [role_id], references: [id])
  department          Department?   @relation("Workon", fields: [department_id], references: [id])
  evaluates           Evaluate[]    @relation("UserEvaluator")
  evaluationsReceived Evaluate[]    @relation("UserAssessor")
  image               Image?        @relation("userImage", fields: [image_id], references: [id])
  roleRequests        RoleRequest[] @relation("UserRoleRequests")

  supervise Supervise[] @relation("UserSupervise")

  history History[]
}

model Role {
  id           String        @id @default(uuid())
  role_name    String        @unique
  description  String?
  role_level   RoleLevel     @default(LEVEL_1)
  user         User[]
  roleRequests RoleRequest[] @relation("RoleRequests")

  permissionsAsEvaluator Permission[]     @relation("EvaluatorOfRole")
  permissionsAsAssessor  Permission[]     @relation("AssessorOfRole")
  roleFormVision         RoleFormVision[]
}

model RoleFormVision {
  role_form_id String          @id @default(uuid())
  form_id      String
  role_id      String
  level        VisionFormLevel
  visionForm   Form            @relation(fields: [form_id], references: [id])
  visionRole   Role            @relation(fields: [role_id], references: [id])

  @@unique([form_id, role_id])
}

model Department {
  id              String  @id @default(uuid())
  department_name String  @unique
  user            User[]  @relation("Workon")
  image_id        String? @unique
  image           Image?  @relation("departmentImage", fields: [image_id], references: [id])

  supervise Supervise? @relation("SuperviseOfDepartment")
}

model Evaluate {
  id             String           @id @default(uuid())
  period_id      String
  assessor_id    String
  evaluator_id   String
  date           DateTime         @default(now())
  evaluator      User             @relation("UserEvaluator", fields: [evaluator_id], references: [id])
  assessor       User             @relation("UserAssessor", fields: [assessor_id], references: [id])
  period         Period           @relation(fields: [period_id], references: [period_id])
  evaluateDetail EvaluateDetail[] @relation("EvaluateToDetail")

  @@unique([assessor_id, evaluator_id])
}

model EvaluateDetail {
  id          String @id @default(uuid())
  evaluate_id String
  question_id String
  score       Float

  // กำหนดความสัมพันธ์ไปยัง FormQuestion
  formQuestion FormQuestion @relation(fields: [question_id], references: [id], name: "EvaluateDetailToFormQuestion")
  evaluate     Evaluate     @relation("EvaluateToDetail", fields: [evaluate_id], references: [id])

  // Unique constraint ระหว่าง evaluate_id และ question_id
  @@unique([evaluate_id, question_id])
}

model Form {
  id              String           @id @default(uuid())
  name            String           @unique
  questions       FormQuestion[]   @relation("form-have-question")
  permissionForms PermissionForm[] @relation("FormOfPermission")
  roleFormVision  RoleFormVision[]
}

model FormQuestion {
  id      String @id @default(uuid())
  content String @unique
  form_id String
  form    Form   @relation("form-have-question", fields: [form_id], references: [id])

  // Opposite relation field ชี้กลับไปที่ EvaluateDetail
  evaluateDetails EvaluateDetail[] @relation(name: "EvaluateDetailToFormQuestion")
}

model Image {
  id         String      @id @default(uuid())
  url        String
  public_id  String
  user       User?       @relation("userImage")
  department Department? @relation("departmentImage")
}

model RoleRequest {
  id        String        @id @default(uuid())
  userId    String
  roleId    String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation("UserRoleRequests", fields: [userId], references: [id])
  role Role @relation("RoleRequests", fields: [roleId], references: [id])
}

model Prefix {
  prefix_id   String @id @default(uuid())
  prefix_name String
  user        User[]
}

model Supervise {
  supervise_id  String @id @default(uuid())
  user_id       String
  department_id String @unique

  user       User       @relation("UserSupervise", fields: [user_id], references: [id])
  department Department @relation("SuperviseOfDepartment", fields: [department_id], references: [id])
}

model Permission {
  permission_id     String @id @default(uuid())
  assessor_role_id  String
  evaluator_role_id String

  evaluatorRole  Role             @relation("EvaluatorOfRole", fields: [evaluator_role_id], references: [id])
  assessorRole   Role             @relation("AssessorOfRole", fields: [assessor_role_id], references: [id])
  permissionForm PermissionForm[] @relation("PermissionToForm")

  @@index([assessor_role_id])
  @@index([evaluator_role_id])
}

model PermissionForm {
  permission_id String
  form_id       String
  ingroup       Boolean

  form       Form       @relation("FormOfPermission", fields: [form_id], references: [id])
  permission Permission @relation("PermissionToForm", fields: [permission_id], references: [permission_id])

  @@id([permission_id, form_id, ingroup])
}

model Period {
  period_id String   @id @default(uuid())
  title     String
  start     DateTime
  end       DateTime
  isAction  Boolean

  evaluate Evaluate[]
  history  History[]
}

model History {
  history_id      String @id @default(uuid())
  user_id         String
  period_id       String
  role_name       String
  department_name String
  user            User   @relation(fields: [user_id], references: [id])
  period          Period @relation(fields: [period_id], references: [period_id])

  history_detail HistoryDetail[]
}

model HistoryDetail {
  history_detail_id String         @id @default(uuid())
  history_id        String
  questionHead      String
  question          String
  history           History        @relation(fields: [history_id], references: [history_id])
  history_score     HistoryScore[]
}

model HistoryScore {
  history_score_id   String @id @default(uuid())
  history_detail_id  String
  type_name          String
  average            Float
  standard_deviation Float

  history_detail HistoryDetail @relation(fields: [history_detail_id], references: [history_detail_id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VisionFormLevel {
  UNSET
  VISION_1
  VISION_2
}

enum RoleLevel {
  LEVEL_1
  LEVEL_2
  LEVEL_3
  LEVEL_4
}
