// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id    String @id @default(uuid())
  email String  @unique
  name  String
  prefix_id String?
  dateofbirth DateTime @db.Date
  password String
  role_id String?
  department_id String?
  image_id String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone String? 

  prefix Prefix? @relation(fields: [prefix_id],references: [prefix_id])
  role Role? @relation(fields: [role_id], references: [id])
  department Department? @relation("Workon",fields: [department_id],references: [id])
  headOfDepartment Department? @relation("HeadOfDepartment" )
  deputyDirectorOf Department? @relation("DeputyDirectorOf") 
  evaluates            Evaluate[]  @relation("UserEvaluator")
  evaluationsReceived  Evaluate[] @relation("UserAssessor")
  image Image? @relation("userImage",fields: [image_id],references: [id])
  roleRequests RoleRequest[] @relation("UserRoleRequests")

  sepervise Supervise[] @relation("UserSupervise")

}
model Role{
  id String @id @default(uuid())
  role_name String @unique
  description String?
  user User[]
  roleRequests RoleRequest[] @relation("RoleRequests")

  permissionAsses Permission? @relation("AssessorOfRole")
  permissionEval Permission? @relation("EvaluatorOfRole")
}
model Department {
  id                      String   @id @default(uuid())
  department_name         String @unique
  user                    User[] @relation("Workon")
  image_id String? @unique
  headOfDepartment_id String?  @unique
  headOfDepartment    User?    @relation("HeadOfDepartment", fields: [headOfDepartment_id], references: [id])
  deputyDirector_id   String?  @unique
  deputyDirector      User?    @relation("DeputyDirectorOf", fields: [deputyDirector_id], references: [id])
  
  image Image? @relation("departmentImage",fields: [image_id],references: [id])

  supervise Supervise? @relation("SuperviseOfDepartment")
}

model Evaluate{
  id String @id @default(uuid())
  assessor_id String
  evaluator_id String
  form_id String
  date DateTime @default(now())
  form Form @relation("form-do-evaluate",fields: [form_id],references:[id])
  evaluator      User     @relation("UserEvaluator", fields: [evaluator_id], references: [id])
  assessor      User     @relation("UserAssessor", fields: [assessor_id], references: [id])

}
model Form{
  id String @id @default(uuid())
  name String @unique
  questions FormQuestion[] @relation("form-have-question")
  evaluate_times Evaluate[] @relation("form-do-evaluate")

  permissionForms PermissionForm[] @relation("FormOfPermission")
}
model FormQuestion{
  id String @id @default(uuid())
  name String @unique
  form_id String
  question_type_id String
  form Form @relation("form-have-question",fields: [form_id],references: [id])
  type QuestionType @relation("type-have-question",fields: [question_type_id],references: [id])

}
model QuestionType{
    id String @id @default(uuid())
    type String
    questions FormQuestion[] @relation("type-have-question")
}

model Image{
  id String @id @default(uuid())
  url String
  public_id String
  user User? @relation("userImage")
  department Department? @relation("departmentImage")
}


model RoleRequest {
  id        String    @id @default(uuid()) 
  userId    String
  roleId    String
  status    RequestStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user     User      @relation("UserRoleRequests", fields: [userId], references: [id])
  role     Role      @relation("RoleRequests", fields: [roleId], references: [id])

}

model Prefix{
  prefix_id String @id @default(uuid())
  prefix_name String 
  user User[]
}


model Supervise{
  supervise_id String @id @default(uuid())
  user_id String
  department_id String @unique
  
  user User @relation("UserSupervise",fields: [user_id],references: [id])
  department Department @relation("SuperviseOfDepartment",fields: [department_id],references: [id])
}

model Permission{
  permission_id String @id @default(uuid())
  assessor_role_id String @unique
  evaluator_role_id String @unique
  permission_level PermissionLevel @default(LEVEL_1)
  in_group  Boolean
  assessorRole Role @relation("AssessorOfRole",fields: [assessor_role_id],references: [id])
  evaluatorRole Role @relation("EvaluatorOfRole",fields: [evaluator_role_id],references:[id])

  permissionForm PermissionForm[] @relation("PermissionToForm")
}

model PermissionForm{
  permission_id String
  form_id String
  
  form Form @relation("FormOfPermission",fields: [form_id],references: [id])
  permission Permission @relation("PermissionToForm",fields: [permission_id],references: [permission_id])

  @@id([permission_id, form_id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
enum PermissionLevel {
  LEVEL_1
  LEVEL_2
  LEVEL_3
}