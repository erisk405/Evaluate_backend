// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id    String @id @default(uuid())
  email String  @unique
  name  String
  dateofbirth DateTime @db.Date
  password String
  role_id String?
  department_id String?
  image_id String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  phone String? 

  role Role? @relation(fields: [role_id], references: [id])
  department Department? @relation("Workon",fields: [department_id],references: [id])
  headOfDepartment Department? @relation("HeadOfDepartment" )
  deputyDirectorOf Department? @relation("DeputyDirectorOf") 
  evaluates            Evaluate[]  @relation("UserEvaluates")
  evaluationsReceived  Evaluate[] @relation("UserEvaluated")
  image Image? @relation("userImage",fields: [image_id],references: [id])
}
model Role{
  id String @id @default(uuid())
  role_name String @unique
  description String?
  user User[]
}
model Department {
  id                      String   @id @default(uuid())
  department_name         String @unique
  user                    User[] @relation("Workon")
  image_id String? @unique
  headOfDepartment_id String?  @unique
  headOfDepartment    User?    @relation("HeadOfDepartment", fields: [headOfDepartment_id], references: [id])
  deputyDirector_id   String?  @unique
  deputyDirector      User?    @relation("DeputyDirectorOf", fields: [deputyDirector_id], references: [id])
  
  image Image? @relation("departmentImage",fields: [image_id],references: [id])
}

model Evaluate{
  id String @id @default(uuid())
  evaluates_uid String
  evaluated_uid String
  form_id String
  date DateTime @default(now())
  form Form @relation("form-do-evaluate",fields: [form_id],references:[id])
  evaluates      User     @relation("UserEvaluates", fields: [evaluates_uid], references: [id])
  evaluated      User     @relation("UserEvaluated", fields: [evaluated_uid], references: [id])

}
model Form{
  id String @id @default(uuid())
  name String @unique
  questions Form_question[] @relation("form-have-question")
  evaluate_times Evaluate[] @relation("form-do-evaluate")
}
model Form_question{
  id String @id @default(uuid())
  name String @unique
  form_id String
  question_type_id String
  form Form @relation("form-have-question",fields: [form_id],references: [id])
  type Question_type @relation("type-have-question",fields: [question_type_id],references: [id])

}
model Question_type{
    id String @id @default(uuid())
    type String
    questions Form_question[] @relation("type-have-question")
}

model Image{
  id String @id @default(uuid())
  url String
  public_id String
  user User? @relation("userImage")
  department Department? @relation("departmentImage")
}